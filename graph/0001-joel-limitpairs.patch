From 3d5ef3c8155f583b7d428b4760db21d1a011b7d6 Mon Sep 17 00:00:00 2001
From: Luke Gallagher <luke@hypergeometric.net>
Date: Mon, 31 Mar 2025 15:48:50 +1100
Subject: [PATCH] LimitPairs patch from Joel Mackenzie

---
 .../query/algorithm/block_max_wand_query.hpp  | 166 +++++++++++++++
 tools/CMakeLists.txt                          |   1 +
 tools/evaluate_queries_bubble.cpp             | 199 ++++++++++++++++++
 3 files changed, 366 insertions(+)
 create mode 100644 tools/evaluate_queries_bubble.cpp

diff --git a/include/pisa/query/algorithm/block_max_wand_query.hpp b/include/pisa/query/algorithm/block_max_wand_query.hpp
index a7b374f6..2e5551d4 100644
--- a/include/pisa/query/algorithm/block_max_wand_query.hpp
+++ b/include/pisa/query/algorithm/block_max_wand_query.hpp
@@ -159,6 +159,172 @@ struct block_max_wand_query {
         }
     }
 
+    template <typename CursorRange>
+    PISA_REQUIRES(concepts::BlockMaxPostingCursor<pisa::val_t<CursorRange>>)
+    void wl_query(CursorRange&& cursors, uint64_t max_docid, std::vector<size_t>& whitelist) {
+        using Cursor = typename std::decay_t<CursorRange>::value_type;
+        if (cursors.empty()) {
+            return;
+        }
+
+        // Fall back to the regular query
+        if (whitelist.size() == 0) {
+            return (*this)(cursors, max_docid);
+        }
+
+        std::vector<Cursor*> ordered_cursors;
+        ordered_cursors.reserve(cursors.size());
+        for (auto& en: cursors) {
+            ordered_cursors.push_back(&en);
+        }
+
+        auto sort_cursors = [&]() {
+            // sort enumerators by increasing docid
+            std::sort(ordered_cursors.begin(), ordered_cursors.end(), [](Cursor* lhs, Cursor* rhs) {
+                return lhs->docid() < rhs->docid();
+            });
+        };
+
+        sort_cursors();
+        size_t wl_cursor = 0;
+        size_t wl_candidate = whitelist[wl_cursor];
+
+        while (true) {
+            // find pivot
+            float upper_bound = 0.F;
+            size_t pivot;
+            bool found_pivot = false;
+            uint64_t pivot_id = max_docid;
+
+            for (pivot = 0; pivot < ordered_cursors.size(); ++pivot) {
+                if (ordered_cursors[pivot]->docid() >= max_docid) {
+                    break;
+                }
+
+                upper_bound += ordered_cursors[pivot]->max_score();
+                if (m_topk.would_enter(upper_bound)) {
+                    found_pivot = true;
+                    pivot_id = ordered_cursors[pivot]->docid();
+                    for (; pivot + 1 < ordered_cursors.size()
+                         && ordered_cursors[pivot + 1]->docid() == pivot_id;
+                         ++pivot) {
+                    }
+                    break;
+                }
+            }
+
+            // no pivot found, we can stop the search
+            if (!found_pivot or wl_cursor == whitelist.size()) {
+                break;
+            }
+
+            // Now check that the pivot is in the wl. If not, move up and try again
+            while (wl_cursor < whitelist.size()) {
+                wl_candidate = whitelist[wl_cursor];
+                if (pivot_id < wl_candidate) {
+                    pivot_id = wl_candidate;
+                    break;
+                }
+                wl_cursor++;
+            }
+
+            double block_upper_bound = 0;
+
+            for (size_t i = 0; i < pivot + 1; ++i) {
+                if (ordered_cursors[i]->block_max_docid() < pivot_id) {
+                    ordered_cursors[i]->block_max_next_geq(pivot_id);
+                }
+
+                block_upper_bound += ordered_cursors[i]->block_max_score();
+            }
+
+            if (m_topk.would_enter(block_upper_bound)) {
+                // check if pivot is a possible match
+                if (pivot_id == ordered_cursors[0]->docid()) {
+                    float score = 0;
+                    for (Cursor* en: ordered_cursors) {
+                        if (en->docid() != pivot_id) {
+                            break;
+                        }
+                        float part_score = en->score();
+                        score += part_score;
+                        block_upper_bound -= en->block_max_score() - part_score;
+                        if (!m_topk.would_enter(block_upper_bound)) {
+                            break;
+                        }
+                    }
+                    for (Cursor* en: ordered_cursors) {
+                        if (en->docid() != pivot_id) {
+                            break;
+                        }
+                        en->next();
+                    }
+
+                    m_topk.insert(score, pivot_id);
+                    // resort by docid
+                    sort_cursors();
+
+                } else {
+                    uint64_t next_list = pivot;
+                    for (; ordered_cursors[next_list]->docid() == pivot_id; --next_list) {
+                    }
+                    ordered_cursors[next_list]->next_geq(pivot_id);
+
+                    // bubble down the advanced list
+                    for (size_t i = next_list + 1; i < ordered_cursors.size(); ++i) {
+                        if (ordered_cursors[i]->docid() <= ordered_cursors[i - 1]->docid()) {
+                            std::swap(ordered_cursors[i], ordered_cursors[i - 1]);
+                        } else {
+                            break;
+                        }
+                    }
+                }
+
+            } else {
+                uint64_t next;
+                uint64_t next_list = pivot;
+
+                float max_weight = ordered_cursors[next_list]->max_score();
+
+                for (uint64_t i = 0; i < pivot; i++) {
+                    if (ordered_cursors[i]->max_score() > max_weight) {
+                        next_list = i;
+                        max_weight = ordered_cursors[i]->max_score();
+                    }
+                }
+
+                next = max_docid;
+
+                for (size_t i = 0; i <= pivot; ++i) {
+                    if (ordered_cursors[i]->block_max_docid() < next) {
+                        next = ordered_cursors[i]->block_max_docid();
+                    }
+                }
+
+                next = next + 1;
+                if (pivot + 1 < ordered_cursors.size() && ordered_cursors[pivot + 1]->docid() < next) {
+                    next = ordered_cursors[pivot + 1]->docid();
+                }
+
+                if (next <= pivot_id) {
+                    next = pivot_id + 1;
+                }
+
+                ordered_cursors[next_list]->next_geq(next);
+
+                // bubble down the advanced list
+                for (size_t i = next_list + 1; i < ordered_cursors.size(); ++i) {
+                    if (ordered_cursors[i]->docid() < ordered_cursors[i - 1]->docid()) {
+                        std::swap(ordered_cursors[i], ordered_cursors[i - 1]);
+                    } else {
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+
     std::vector<typename topk_queue::entry_type> const& topk() const { return m_topk.topk(); }
 
     void clear_topk() { m_topk.clear(); }
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index b60dc377..f07a56b0 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -11,6 +11,7 @@ add_tool(compress_inverted_index compress_inverted_index.cpp)
 add_tool(create_wand_data create_wand_data.cpp)
 add_tool(queries queries.cpp)
 add_tool(evaluate_queries evaluate_queries.cpp)
+add_tool(evaluate_queries_bubble evaluate_queries_bubble.cpp)
 add_tool(thresholds thresholds.cpp)
 add_tool(profile_queries profile_queries.cpp)
 add_tool(evaluate_collection_ordering evaluate_collection_ordering.cpp)
diff --git a/tools/evaluate_queries_bubble.cpp b/tools/evaluate_queries_bubble.cpp
new file mode 100644
index 00000000..650a9309
--- /dev/null
+++ b/tools/evaluate_queries_bubble.cpp
@@ -0,0 +1,199 @@
+#include <iostream>
+#include <optional>
+
+#include <CLI/CLI.hpp>
+#include <boost/algorithm/string/classification.hpp>
+#include <boost/algorithm/string/split.hpp>
+#include <functional>
+#include <mappable/mapper.hpp>
+#include <mio/mmap.hpp>
+#include <range/v3/view/enumerate.hpp>
+#include <spdlog/sinks/stdout_color_sinks.h>
+#include <spdlog/spdlog.h>
+#include <tbb/global_control.h>
+#include <tbb/parallel_for.h>
+
+#include "accumulator/lazy_accumulator.hpp"
+#include "accumulator/simple_accumulator.hpp"
+#include "app.hpp"
+#include "cursor/block_max_scored_cursor.hpp"
+#include "cursor/max_scored_cursor.hpp"
+#include "cursor/scored_cursor.hpp"
+#include "index_types.hpp"
+#include "query/algorithm/block_max_maxscore_query.hpp"
+#include "query/algorithm/block_max_ranked_and_query.hpp"
+#include "query/algorithm/block_max_wand_query.hpp"
+#include "query/algorithm/maxscore_query.hpp"
+#include "query/algorithm/ranked_and_query.hpp"
+#include "query/algorithm/ranked_or_query.hpp"
+#include "query/algorithm/ranked_or_taat_query.hpp"
+#include "query/algorithm/wand_query.hpp"
+#include "scorer/scorer.hpp"
+#include "wand_data.hpp"
+#include "wand_data_compressed.hpp"
+#include "wand_data_raw.hpp"
+
+using namespace pisa;
+using ranges::views::enumerate;
+
+template <typename IndexType, typename WandType>
+void evaluate_queries(
+    IndexType const* index_ptr,
+    const std::string& wand_data_filename,
+    const std::vector<Query>& queries,
+    const std::optional<std::string>& thresholds_filename,
+    std::string const& type,
+    std::string const& query_type,
+    uint64_t k,
+    std::string const& documents_filename,
+    ScorerParams const& scorer_params,
+    const bool weighted,
+    std::string const& run_id,
+    std::string const& iteration
+) {
+    auto const& index = *index_ptr;
+    WandType const wdata(MemorySource::mapped_file(wand_data_filename));
+
+    auto scorer = scorer::from_params(scorer_params, wdata);
+    std::function<std::vector<typename topk_queue::entry_type>(Query, std::vector<size_t>&)> query_fun;
+
+    if (query_type == "block_max_wand") {
+        query_fun = [&](Query query, std::vector<size_t>& wl) {
+            topk_queue topk(k);
+            block_max_wand_query block_max_wand_q(topk);
+            block_max_wand_q.wl_query(
+                make_block_max_scored_cursors(index, wdata, *scorer, query, weighted),
+                index.num_docs(),
+                wl
+            );
+            topk.finalize();
+            return topk.topk();
+        };
+    } else {
+        spdlog::error("Unsupported query type: {}", query_type);
+    }
+
+    auto source = std::make_shared<mio::mmap_source>(documents_filename.c_str());
+    auto docmap = Payload_Vector<>::from(*source);
+
+    std::vector<std::vector<typename topk_queue::entry_type>> raw_results(queries.size());
+    auto start_batch = std::chrono::steady_clock::now();
+
+    //tbb::parallel_for(size_t(0), queries.size(), [&, query_fun](size_t query_idx) {
+    for (size_t query_idx = 0; query_idx < queries.size(); ++query_idx) {
+
+        // 0. Check we haven't already processed this query
+        if (raw_results[query_idx].size() > 0) {
+            continue;
+        }
+        // 1. Run seed query
+        std::vector<size_t> wl;
+        raw_results[query_idx] = query_fun(queries[query_idx], wl);
+        // 2. Use results of seed query to form the whitelist
+        std::vector<size_t> prefix;
+        for (auto&& [rank, result]: enumerate(raw_results[query_idx])) {
+            if (rank < 64) { // XXX parameter - count of prefix to score with bubble
+                prefix.push_back(result.second);
+            }
+            wl.push_back(result.second); // internal docid into bubble
+        }
+
+        // 3. Run WL queries
+        for (auto qid : prefix) {
+            if (raw_results[qid].size() > 0) {
+                continue;
+            }
+            raw_results[qid] = query_fun(queries[qid], wl);
+        }
+    }
+
+    //});
+    auto end_batch = std::chrono::steady_clock::now();
+
+    for (size_t query_idx = 0; query_idx < raw_results.size(); ++query_idx) {
+        auto results = raw_results[query_idx];
+        auto qid = queries[query_idx].id();
+        for (auto&& [rank, result]: enumerate(results)) {
+            std::cout << fmt::format(
+                "{} {} {} {} {} {}\n",
+                qid.value_or(std::to_string(query_idx)),
+                iteration,
+                docmap[result.second],
+                rank + 1,
+                result.first,
+                run_id
+            );
+        }
+    }
+    auto end_print = std::chrono::steady_clock::now();
+    double batch_ms =
+        std::chrono::duration_cast<std::chrono::milliseconds>(end_batch - start_batch).count();
+    double batch_with_print_ms =
+        std::chrono::duration_cast<std::chrono::milliseconds>(end_print - start_batch).count();
+    spdlog::info("Time taken to process queries: {}ms", batch_ms);
+    spdlog::info("Time taken to process queries with printing: {}ms", batch_with_print_ms);
+}
+
+using wand_raw_index = wand_data<wand_data_raw>;
+using wand_uniform_index = wand_data<wand_data_compressed<>>;
+using wand_uniform_index_quantized = wand_data<wand_data_compressed<PayloadType::Quantized>>;
+
+int main(int argc, const char** argv) {
+    spdlog::set_default_logger(spdlog::stderr_color_mt("default"));
+
+    std::string documents_file;
+    std::string run_id = "R0";
+    bool quantized = false;
+
+    App<arg::Index,
+        arg::WandData<arg::WandMode::Required>,
+        arg::Query<arg::QueryMode::Ranked>,
+        arg::Algorithm,
+        arg::Scorer,
+        arg::Thresholds,
+        arg::Threads,
+        arg::LogLevel>
+        app{"Retrieves query results in TREC format."};
+    app.add_option("-r,--run", run_id, "Run identifier");
+    app.add_option("--documents", documents_file, "Document lexicon")->required();
+    app.add_flag("--quantized", quantized, "Quantized scores");
+
+    CLI11_PARSE(app, argc, argv);
+
+    spdlog::set_level(app.log_level());
+    tbb::global_control control(tbb::global_control::max_allowed_parallelism, app.threads() + 1);
+    spdlog::info("Number of worker threads: {}", app.threads());
+
+    if (run_id.empty()) {
+        run_id = "PISA";
+    }
+
+    auto iteration = "Q0";
+
+    run_for_index(app.index_encoding(), MemorySource::mapped_file(app.index_filename()), [&](auto index) {
+        using Index = std::decay_t<decltype(index)>;
+        auto params = std::make_tuple(
+            &index,
+            app.wand_data_path(),
+            app.queries(),
+            app.thresholds_file(),
+            app.index_encoding(),
+            app.algorithm(),
+            app.k(),
+            documents_file,
+            app.scorer_params(),
+            app.weighted(),
+            run_id,
+            iteration
+        );
+        if (app.is_wand_compressed()) {
+            if (quantized) {
+                std::apply(evaluate_queries<Index, wand_uniform_index_quantized>, params);
+            } else {
+                std::apply(evaluate_queries<Index, wand_uniform_index>, params);
+            }
+        } else {
+            std::apply(evaluate_queries<Index, wand_raw_index>, params);
+        }
+    });
+}
-- 
2.39.5

